import docker
import argparse
import requests
import io
from tabulate import tabulate

def fetch_docker_image_info(image_url):
    client = docker.from_env()

    # Pull the Docker image
    print(f"Pulling Docker image: {image_url}")
    image = client.images.pull(image_url)

    # Create a table for image details
    table = [
        ["Image ID", image.id],
        ["Image Tags", ', '.join(image.tags)],
        ["Image RepoDigests", ', '.join(image.attrs['RepoDigests'])],
        ["Image Created", image.attrs['Created']],
        ["Image Size", f"{image.attrs['Size']} bytes"],
        ["Image Virtual Size", f"{image.attrs['VirtualSize']} bytes"]
    ]

    # Display image details in a table format
    print(f"\nImage details for: {image_url}")
    print(tabulate(table, headers=["Attribute", "Value"], tablefmt="fancy_grid"))

    return image

def scan_for_vulnerabilities(image, api_key):
    url = "https://www.virustotal.com/vtapi/v2/file/scan"
    params = {"apikey": api_key}

    # Save the Docker image as a tar file
    tar_data = b"".join(image.save())
    tar_file = io.BytesIO(tar_data)

    files = {"file": ("dummy.tar", tar_file)}

    response = requests.post(url, files=files, params=params)
    if response.status_code == 200:
        scan_results = response.json()
        resource = scan_results["resource"]
        print(f"Scan successfully submitted. Resource ID: {resource}")
        print("Scanning in progress...\n")
        show_scan_progress(resource, api_key)
    else:
        print("Failed to submit the scan.")

def show_scan_progress(resource, api_key):
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    params = {"apikey": api_key, "resource": resource}

    while True:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            scan_results = response.json()
            if "scans" in scan_results:
                display_scan_results(scan_results["scans"])
            else:
                print("No scan results available.")
            if scan_results["response_code"] == 1:
                print("Scan completed.")
                break
            elif scan_results["response_code"] == -2:
                print("Scan is still in progress. Please wait...")
                time.sleep(10)  # Wait for 10 seconds before checking the status again
            else:
                print("Scan failed or resource not found.")
                break
        else:
            print("Failed to retrieve scan results.")
            break

def display_scan_results(scan_results):
    results_table = []
    for antivirus, result in scan_results.items():
        results_table.append([antivirus, result.get("detected", ""), result.get("result", "")])

    print("\nScan Results:")
    print(tabulate(results_table, headers=["Antivirus", "Detected", "Result"], tablefmt="fancy_grid"))

# Parse command-line arguments
parser = argparse.ArgumentParser(description="Fetch Docker image information and perform vulnerability scanning.")
parser.add_argument("image_url", type=str, help="URL of the Docker image")
parser.add_argument("--api", type=str, help="VirusTotal API key")
parser.add_argument("--scan", action="store_true", help="Perform vulnerability scanning")
args = parser.parse_args()

# Fetch and display Docker image information
docker_image = fetch_docker_image_info(args.image_url)

# Perform vulnerability scanning if enabled
if args.scan:
    scan_for_vulnerabilities(docker_image, args.api)


if __name__ == "__main__":
    main()
